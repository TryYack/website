{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/joduplessis/Work/Weekday/website/pages/confirm_email/[token].js\";\nimport React from \"react\";\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport { useEffect, useState } from 'react';\n\nfunction Index(props) {\n  var router = useRouter();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  useEffect(function () {\n    if (!router.query.token) return;\n    setLoading(true);\n    setError(false);\n\n    try {\n      var payload = atob(router.query.token);\n\n      var _JSON$parse = JSON.parse(payload),\n          token = _JSON$parse.token,\n          email = _JSON$parse.email;\n\n      fetch('http://localhost:8181/api/v1/auth/confirm', {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        redirect: 'follow',\n        referrer: 'no-referrer',\n        body: payload\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        setLoading(false);\n        if (!data.success) setError(true);\n      })[\"catch\"](function (e) {\n        setLoading(false);\n        setError(true);\n      });\n    } catch (e) {\n      setLoading(false);\n      setError(true);\n    }\n  }, [router.query.token]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, router.query.token));\n}\n\nexport default Index;","map":{"version":3,"sources":["/Users/joduplessis/Work/Weekday/website/pages/confirm_email/[token].js"],"names":["useRouter","fetch","useEffect","useState","Index","props","router","error","setError","loading","setLoading","query","token","payload","atob","JSON","parse","email","method","mode","cache","credentials","headers","redirect","referrer","body","then","res","json","data","success","e"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,MAAMC,MAAM,GAAGN,SAAS,EAAxB;;AADoB,kBAEMG,QAAQ,CAAC,KAAD,CAFd;AAAA;AAAA,MAEbI,KAFa;AAAA,MAENC,QAFM;;AAAA,mBAGUL,QAAQ,CAAC,KAAD,CAHlB;AAAA;AAAA,MAGbM,OAHa;AAAA,MAGJC,UAHI;;AAKpBR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACI,MAAM,CAACK,KAAP,CAAaC,KAAlB,EAAyB;AAEzBF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,QAAQ,CAAC,KAAD,CAAR;;AAEA,QAAI;AACF,UAAMK,OAAO,GAAGC,IAAI,CAACR,MAAM,CAACK,KAAP,CAAaC,KAAd,CAApB;;AADE,wBAEuBG,IAAI,CAACC,KAAL,CAAWH,OAAX,CAFvB;AAAA,UAEMD,KAFN,eAEMA,KAFN;AAAA,UAEaK,KAFb,eAEaA,KAFb;;AAIFhB,MAAAA,KAAK,CAAC,2CAAD,EAA8C;AACjDiB,QAAAA,MAAM,EAAE,MADyC;AAEjDC,QAAAA,IAAI,EAAE,MAF2C;AAGjDC,QAAAA,KAAK,EAAE,UAH0C;AAIjDC,QAAAA,WAAW,EAAE,aAJoC;AAKjDC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SALwC;AAMjDC,QAAAA,QAAQ,EAAE,QANuC;AAOjDC,QAAAA,QAAQ,EAAE,aAPuC;AAQjDC,QAAAA,IAAI,EAAEZ;AAR2C,OAA9C,CAAL,CAUCa,IAVD,CAUM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OAVT,EAWCF,IAXD,CAWM,UAAAG,IAAI,EAAI;AACZnB,QAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,YAAI,CAACmB,IAAI,CAACC,OAAV,EAAmBtB,QAAQ,CAAC,IAAD,CAAR;AACpB,OAfD,WAgBO,UAAAuB,CAAC,EAAI;AACVrB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAnBD;AAoBD,KAxBD,CAwBE,OAAOuB,CAAP,EAAU;AACVrB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAlCQ,EAkCN,CAACF,MAAM,CAACK,KAAP,CAAaC,KAAd,CAlCM,CAAT;AAoCA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,MAAM,CAACK,KAAP,CAAaC,KAAlB,CADF,CADF;AAKD;;AAED,eAAeR,KAAf","sourcesContent":["import { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch'\nimport { useEffect, useState } from 'react'\n\nfunction Index(props) {\n  const router = useRouter();\n  const [error, setError] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    if (!router.query.token) return\n\n    setLoading(true)\n    setError(false)\n\n    try {\n      const payload = atob(router.query.token);\n      const { token, email } = JSON.parse(payload);\n\n      fetch('http://localhost:8181/api/v1/auth/confirm', {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: { 'Content-Type': 'application/json' },\n        redirect: 'follow',\n        referrer: 'no-referrer',\n        body: payload,\n      })\n      .then(res => res.json())\n      .then(data => {\n        setLoading(false)\n\n        if (!data.success) setError(true)\n      })\n      .catch(e => {\n        setLoading(false)\n        setError(true)\n      })\n    } catch (e) {\n      setLoading(false)\n      setError(true)\n    }\n  }, [router.query.token])\n\n  return (\n    <React.Fragment>\n      <h1>{router.query.token}</h1>\n    </React.Fragment>\n  );\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}